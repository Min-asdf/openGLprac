
#include <GL/freeglut.h>

//육면체 정점의 좌표
GLfloat MyVertices[8][3] = { {-0.25, -0.25, 0.25}, {-0.25, 0.25, 0.25},
	{0.25, 0.25, 0.25},{0.25, -0.25, 0.25}, {-0.25, -0.25, -0.25},
	{-0.25, 0.25, -0.25}, {0.25, 0.25, -0.25}, {0.25, -0.25, -0.25} };
//육면체 정점의 색
GLfloat MyColors[8][3] = { {0.2, 0.2, 0.2}, {1.0, 0.0, 0.0},
	{1.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0},
	{1.0, 0.0, 1.0}, {1.0, 1.0, 1.0}, {0.0, 1.0, 1.0} };
//육면체 정점 리스트 -> MyVertices[8] 내부에 해당 정점이 들어가 있는 곳의 Index
GLubyte MyVertexList[24] = { 0,3,2,1, 2,3,7,6, 0,4,7,3, 1,2,6,5, 4,5,6,7, 0,1,5,4 };

//함수 선언
void MyDisplay();

int main(int argc, char** argv) {
	//윈도우 함수
	glutInit(&argc, argv);
	//Depth buffer 사용 명시
	glutInitDisplayMode(GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("OpenGL Drawing Example");
	glClearColor(1.0, 1.0, 1.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);

	//콜백 함수 등록
	glutDisplayFunc(MyDisplay);

	//이벤트 루프 진입
	glutMainLoop();

	return 0;
}

//MyDisplay 콜백 함수
void MyDisplay() {
	//Depth buffer 활성화 및 테스트
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);

	//표면을 반시계 방향으로 (CCW: Counter Clockwise)순서로 나열하는 함수
	glFrontFace(GL_CCW);
	//정점 배열 기능 활성화
	glEnableClientState(GL_COLOR_ARRAY);
	glEnableClientState(GL_VERTEX_ARRAY);
	//실제 정점 색을 저장한 변수명인 MyColor를 제시 (3 -> 배열 요소 하나가 3개의 요소로 이루어짐, GL_FLOAT -> 부동 소수 타입, 0 -> 배열 요소 사이에 빈 공간이 없음)
	glColorPointer(3, GL_FLOAT, 0, MyColors);
	//실제 정점 좌표를 저장한 변수명인 MyVertex를 제시
	glVertexPointer(3, GL_FLOAT, 0, MyVertices);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	//오브젝트 회전
	glRotatef(30.0, 1.0, 1.0, 1.0);
	for (GLint i = 0; i < 6; i++) {
		//오브젝트 그리기
		//GL_POLYGON -> 다각형 오브젝트
		//4, GL_UNSIGNED_BYTE -> unsigned byte 타입으로 표시되는 4개의 Indes로 구성됨
		//&MyVertexList[4 * i] -> 정점 리스트의 시작 주소, i값이 변함에 따라 다각형을 구성하는 첫 Index의 시작 주소를 바꾸기 위한 것
		glDrawElements(GL_POLYGON, 4, GL_UNSIGNED_BYTE, &MyVertexList[4 * i]);
	}

	glFlush();
}
